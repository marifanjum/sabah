<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Image Collage Editor</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      background: #111;
      color: #fff;
      display: flex;
      flex-direction: column;
      align-items: center;
      margin: 0;
      padding: 10px;
    }
    #canvas {
      border: 2px solid #fff;
      cursor: pointer;
    }
    .controls {
      margin: 10px;
      display: flex;
      flex-wrap: wrap;
      gap: 10px;
      align-items: center;
      justify-content: center;
    }
    label {
      display: flex;
      align-items: center;
      gap: 5px;
    }
  </style>
</head>
<body>
  <div class="controls">
    <label><input type="checkbox" id="toggleBgImage"> Show Background Image</label>
    <label>Gradient 1 <input type="color" id="gradColor1" value="#ff0000"></label>
    <label>Gradient 2 <input type="color" id="gradColor2" value="#0000ff"></label>
    <label>Direction
      <select id="gradDirection">
        <option value="to right">Left → Right</option>
        <option value="to left">Right → Left</option>
        <option value="to bottom">Top → Bottom</option>
        <option value="to top">Bottom → Top</option>
        <option value="to bottom right">Top Left → Bottom Right</option>
        <option value="to bottom left">Top Right → Bottom Left</option>
        <option value="to top right">Bottom Left → Top Right</option>
        <option value="to top left">Bottom Right → Top Left</option>
      </select>
    </label>
    <label><input type="checkbox" id="toggleBorder"> Show Border</label>
    <label><input type="checkbox" id="toggleLogo"> Show Logo</label>
    <button id="downloadBtn">Download</button>
  </div>

  <canvas id="canvas" width="800" height="600"></canvas>

  <script>
    const canvas = document.getElementById("canvas");
    const ctx = canvas.getContext("2d");

    const toggleBgImage = document.getElementById("toggleBgImage");
    const gradColor1 = document.getElementById("gradColor1");
    const gradColor2 = document.getElementById("gradColor2");
    const gradDirection = document.getElementById("gradDirection");
    const toggleBorder = document.getElementById("toggleBorder");
    const toggleLogo = document.getElementById("toggleLogo");
    const downloadBtn = document.getElementById("downloadBtn");

    const bgImage = new Image();
    bgImage.src = "image-bg.png";

    const logo = new Image();
    logo.src = "logo.png"; // replace with your logo file

    // Define grid cells
    let cells = [
      { x: 50, y: 50, w: 300, h: 200, img: null, scale: 1, offsetX: 0, offsetY: 0 },
      { x: 400, y: 50, w: 300, h: 200, img: null, scale: 1, offsetX: 0, offsetY: 0 },
      { x: 50, y: 300, w: 300, h: 200, img: null, scale: 1, offsetX: 0, offsetY: 0 },
      { x: 400, y: 300, w: 300, h: 200, img: null, scale: 1, offsetX: 0, offsetY: 0 }
    ];

    let selectedCell = null;

    function renderCollage(showSelection = true) {
      ctx.clearRect(0, 0, canvas.width, canvas.height);

      // Background
      if (toggleBgImage.checked) {
        ctx.drawImage(bgImage, 0, 0, canvas.width, canvas.height);
      } else {
        const c1 = gradColor1.value;
        const c2 = gradColor2.value;
        const dir = gradDirection.value;

        let x0 = 0, y0 = 0, x1 = 0, y1 = 0;
        switch (dir) {
          case "to right": x0=0;y0=0;x1=canvas.width;y1=0; break;
          case "to left": x0=canvas.width;y0=0;x1=0;y1=0; break;
          case "to bottom": x0=0;y0=0;x1=0;y1=canvas.height; break;
          case "to top": x0=0;y0=canvas.height;x1=0;y1=0; break;
          case "to bottom right": x0=0;y0=0;x1=canvas.width;y1=canvas.height; break;
          case "to bottom left": x0=canvas.width;y0=0;x1=0;y1=canvas.height; break;
          case "to top right": x0=0;y0=canvas.height;x1=canvas.width;y1=0; break;
          case "to top left": x0=canvas.width;y0=canvas.height;x1=0;y1=0; break;
        }
        const grad = ctx.createLinearGradient(x0,y0,x1,y1);
        grad.addColorStop(0, c1);
        grad.addColorStop(1, c2);
        ctx.fillStyle = grad;
        ctx.fillRect(0, 0, canvas.width, canvas.height);
      }

      // Images
      cells.forEach((cell, index) => {
        if (cell.img) {
          const scaledW = cell.img.width * cell.scale;
          const scaledH = cell.img.height * cell.scale;
          const dx = cell.x + cell.offsetX;
          const dy = cell.y + cell.offsetY;
          ctx.drawImage(cell.img, dx, dy, scaledW, scaledH, cell.x, cell.y, cell.w, cell.h);
        }

        // selection border only in preview
        if (showSelection && index === selectedCell) {
          ctx.setLineDash([6]);
          ctx.strokeStyle = "black";
          ctx.lineWidth = 2;
          ctx.strokeRect(cell.x, cell.y, cell.w, cell.h);
          ctx.setLineDash([]);
        }

        // permanent border toggle
        if (toggleBorder.checked) {
          ctx.strokeStyle = "#fff";
          ctx.lineWidth = 3;
          ctx.strokeRect(cell.x, cell.y, cell.w, cell.h);
        }
      });

      // Logo
      if (toggleLogo.checked && logo.complete) {
        ctx.drawImage(logo, canvas.width - 120, canvas.height - 80, 100, 60);
      }
    }

    // Cell selection
    canvas.addEventListener("click", (e) => {
      const rect = canvas.getBoundingClientRect();
      const mx = e.clientX - rect.left;
      const my = e.clientY - rect.top;
      selectedCell = null;
      cells.forEach((cell, i) => {
        if (mx >= cell.x && mx <= cell.x+cell.w && my >= cell.y && my <= cell.y+cell.h) {
          selectedCell = i;
        }
      });
      renderCollage(true);
    });

    // Zoom with mouse wheel
    canvas.addEventListener("wheel", (e) => {
      if (selectedCell !== null) {
        e.preventDefault();
        const cell = cells[selectedCell];
        cell.scale += e.deltaY * -0.001;
        if (cell.scale < 0.1) cell.scale = 0.1;
        renderCollage(true);
      }
    });

    // Paste image
    document.addEventListener("paste", (e) => {
      if (selectedCell !== null) {
        const items = e.clipboardData.items;
        for (let i = 0; i < items.length; i++) {
          if (items[i].type.indexOf("image") !== -1) {
            const blob = items[i].getAsFile();
            const img = new Image();
            img.onload = () => {
              cells[selectedCell].img = img;
              renderCollage(true);
            };
            img.src = URL.createObjectURL(blob);
          }
        }
      }
    });

    // Re-render on changes
    [toggleBgImage, gradColor1, gradColor2, gradDirection, toggleBorder, toggleLogo]
      .forEach(el => el.addEventListener("input", () => renderCollage(true)));

    // Download without selection border
    downloadBtn.addEventListener("click", () => {
      renderCollage(false);
      const link = document.createElement("a");
      link.download = "collage.png";
      link.href = canvas.toDataURL();
      link.click();
      renderCollage(true); // restore preview
    });

    bgImage.onload = () => renderCollage(true);
    logo.onload = () => renderCollage(true);
  </script>
</body>
</html>
