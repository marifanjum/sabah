<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Social Media Image Generator - English</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      background: #111;
      color: #fff;
      display: flex;
      flex-direction: column;
      align-items: center;
      padding: 20px;
    }
    #headlineInput {
      width: 90%;
      font-size: 20px;
      padding: 10px;
      margin-bottom: 20px;
      border: none;
      border-radius: 6px;
    }
    #canvas {
      border: 2px solid #444;
      margin-bottom: 20px;
      cursor: grab;
    }
    #canvas:active {
      cursor: grabbing;
    }
    .controls {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(180px, 1fr));
      gap: 15px;
      width: 90%;
    }
    .control-group {
      background: #222;
      padding: 10px;
      border-radius: 8px;
    }
    label {
      display: block;
      margin-bottom: 5px;
      font-size: 14px;
    }
    input[type="range"], input[type="file"], input[type="number"] {
      width: 100%;
    }
    button {
      padding: 12px;
      margin-top: 20px;
      background: #fff403;
      border: none;
      border-radius: 6px;
      font-size: 16px;
      font-weight: bold;
      cursor: pointer;
      width: 200px;
    }
  </style>
</head>
<body>
  <h2> English social media card</h2>
  <input id="headlineInput" type="text" placeholder="Enter headline text here">

  <canvas id="canvas" width="1080" height="1080"></canvas>

  <div class="controls">
    <div class="control-group">
      <label>Upload Main Image</label>
      <input type="file" id="imageLoader" accept="image/*">
    </div>
    <div class="control-group">
      <label>Image Zoom</label>
      <input type="range" id="imageZoom" min="0.5" max="3" step="0.1" value="1">
    </div>
    <div class="control-group">
      <label>Font Size</label>
      <input type="range" id="fontSize" min="30" max="120" value="80">
    </div>
    <div class="control-group">
      <label>Line Height</label>
      <input type="range" id="lineHeight" min="40" max="150" value="100">
    </div>
    <div class="control-group">
      <label>Letter Spacing</label>
      <input type="range" id="letterSpacing" min="0" max="20" value="0">
    </div>
    <div class="control-group">
      <label>Stroke Width</label>
      <input type="range" id="strokeWidth" min="0" max="10" value="2">
    </div>
    <div class="control-group">
      <label>Headline Y Position</label>
      <input type="range" id="headlineY" min="700" max="1050" value="750">
    </div>
    <div class="control-group">
      <label>Number of Lines</label>
      <input type="number" id="numLines" min="1" max="4" value="2">
    </div>
    <div class="control-group">
      <label><input type="checkbox" id="toggleBorder" checked> Show Border</label>
    </div>
    <div class="control-group">
      <label><input type="checkbox" id="toggleLogo" checked> Show Logo</label>
    </div>
  </div>

  <button id="downloadBtn">Download Final Image</button>

  <script>
    const canvas = document.getElementById("canvas");
    const ctx = canvas.getContext("2d");

    const headlineInput = document.getElementById("headlineInput");
    const imageLoader = document.getElementById("imageLoader");
    const imageZoomControl = document.getElementById("imageZoom");
    const fontSizeControl = document.getElementById("fontSize");
    const lineHeightControl = document.getElementById("lineHeight");
    const letterSpacingControl = document.getElementById("letterSpacing");
    const strokeWidthControl = document.getElementById("strokeWidth");
    const headlineYControl = document.getElementById("headlineY");
    const numLinesControl = document.getElementById("numLines");
    const downloadBtn = document.getElementById("downloadBtn");

    const toggleBorder = document.getElementById("toggleBorder");
    const toggleLogo = document.getElementById("toggleLogo");

    let mainImage = null;
    let bgImage = new Image();
    let logoImage = new Image();
    bgImage.src = "bg.png";
    logoImage.src = "sabah-logo.PNG";

    let imageZoom = 1;
    let imageOffsetX = 0, imageOffsetY = 0;
    let isDragging = false, dragStartX = 0, dragStartY = 0;

    imageLoader.addEventListener("change", handleImage, false);
    [
      headlineInput, fontSizeControl, lineHeightControl, letterSpacingControl,
      strokeWidthControl, headlineYControl,
      imageZoomControl, toggleBorder, toggleLogo, numLinesControl
    ].forEach(ctrl => ctrl.addEventListener("input", draw));

    function handleImage(e) {
      const reader = new FileReader();
      reader.onload = function(event) {
        mainImage = new Image();
        mainImage.onload = function() {
          const targetWidth = 1080, targetHeight = 648;
          const scaleX = targetWidth / mainImage.width;
          const scaleY = targetHeight / mainImage.height;
          imageZoom = Math.min(scaleX, scaleY);
          imageOffsetX = 0;
          imageOffsetY = 0;
          imageZoomControl.value = imageZoom.toFixed(2);
          draw();
        };
        mainImage.src = event.target.result;
      };
      reader.readAsDataURL(e.target.files[0]);
    }

    function drawHeadline() {
      const text = headlineInput.value;
      if (!text) return;

      const lineHeight = parseInt(lineHeightControl.value);
      const strokeWidth = parseInt(strokeWidthControl.value);
      const baseY = parseInt(headlineYControl.value);
      const numLines = Math.min(Math.max(parseInt(numLinesControl.value), 1), 4);
      const letterSpacing = parseInt(letterSpacingControl.value);

      let fontSize = parseInt(fontSizeControl.value);
      ctx.textAlign = "left";
      ctx.direction = "ltr";
      ctx.lineWidth = strokeWidth;
      ctx.strokeStyle = "#fff403";
      ctx.fillStyle = "#fff403";

      const words = text.split(/\s+/);

      // Split words evenly across lines
      const lines = [];
      let start = 0;
      for (let i = 0; i < numLines; i++) {
        const remainingWords = words.length - start;
        const remainingLines = numLines - i;
        const wordsInLine = Math.ceil(remainingWords / remainingLines);
        lines.push(words.slice(start, start + wordsInLine).join(" "));
        start += wordsInLine;
      }

      // Auto scale font size to fit all lines
      while (true) {
        let fits = true;
        for (let line of lines) {
          const lineWidth = ctx.measureText(line).width + (line.length - 1) * letterSpacing;
          if (lineWidth > canvas.width * 0.9) { // leave 10% margin
            fits = false;
            break;
          }
        }
        if (!fits && fontSize > 10) {
          fontSize -= 1;
          ctx.font = `${fontSize}px Arial, sans-serif`;
        } else {
          break;
        }
      }

      ctx.font = `${fontSize}px Arial, sans-serif`;

      // Draw each line with proper centering
      lines.forEach((lineText, lineIndex) => {
        let totalWidth = ctx.measureText(lineText).width + (lineText.length - 1) * letterSpacing;
        let startX = canvas.width / 2 - totalWidth / 2;
        const y = baseY + lineIndex * lineHeight;
        for (let char of lineText) {
          ctx.fillText(char, startX, y);
          ctx.strokeText(char, startX, y);
          startX += ctx.measureText(char).width + letterSpacing;
        }
      });
    }

    function draw() {
      ctx.clearRect(0, 0, canvas.width, canvas.height);
      if (bgImage.complete) ctx.drawImage(bgImage, 0, 0, canvas.width, canvas.height);

      if (mainImage) {
        const targetWidth = 1080, targetHeight = 648;
        const scaledWidth = mainImage.width * imageZoom;
        const scaledHeight = mainImage.height * imageZoom;

        const drawX = (targetWidth - scaledWidth) / 2 + imageOffsetX;
        const drawY = (targetHeight - scaledHeight) / 2 + imageOffsetY;

        ctx.save();
        ctx.beginPath();
        ctx.rect(0, 0, targetWidth, targetHeight);
        ctx.clip();
        ctx.drawImage(mainImage, drawX, drawY, scaledWidth, scaledHeight);
        ctx.restore();
      }

      if (toggleBorder.checked) {
        const frameX = 0, frameY = 0;
        const frameWidth = 1080, frameHeight = 648;

        ctx.strokeStyle = "white";
        ctx.lineWidth = 2;
        ctx.strokeRect(frameX + 10, frameY + 10, frameWidth - 20, frameHeight - 20);

        ctx.strokeStyle = "#ccc";
        ctx.lineWidth = 2;
        ctx.strokeRect(frameX + 14, frameY + 14, frameWidth - 28, frameHeight - 28);
      }

      if (toggleLogo.checked && logoImage && logoImage.complete && logoImage.naturalWidth > 0) {
        ctx.drawImage(logoImage, canvas.width - 131, 20, 120, 100);
      }

      drawHeadline();
    }

    imageZoomControl.addEventListener("input", () => {
      imageZoom = parseFloat(imageZoomControl.value);
      draw();
    });

    canvas.addEventListener("mousedown", e => {
      if (e.offsetY <= 648) {
        isDragging = true;
        dragStartX = e.offsetX - imageOffsetX;
        dragStartY = e.offsetY - imageOffsetY;
      }
    });

    canvas.addEventListener("mousemove", e => {
      if (isDragging) {
        imageOffsetX = e.offsetX - dragStartX;
        imageOffsetY = e.offsetY - dragStartY;
        draw();
      }
    });

    canvas.addEventListener("mouseup", () => { isDragging = false; });
    canvas.addEventListener("mouseleave", () => { isDragging = false; });

    downloadBtn.addEventListener("click", () => {
      const link = document.createElement("a");
      link.download = "final-image.png";
      link.href = canvas.toDataURL("image/png");
      link.click();
    });

    bgImage.onload = draw;
    logoImage.onload = draw;
  </script>
</body>
</html>

