<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Social Card Generator</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      background: #111;
      color: #fff;
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: flex-start;
      height: 100vh;
      margin: 0;
      padding: 20px;
    }
    canvas {
      border: 1px solid #444;
      margin-bottom: 15px;
    }
    .controls {
      display: flex;
      flex-wrap: wrap;
      gap: 15px;
      justify-content: center;
      margin-bottom: 15px;
    }
    .controls label {
      display: flex;
      align-items: center;
      gap: 5px;
    }
    .controls input[type="text"] {
      padding: 5px;
      width: 250px;
    }
  </style>
</head>
<body>
  <h2>Social Card Generator</h2>
  <canvas id="canvas" width="1080" height="648"></canvas>

  <div class="controls">
    <label>Upload Image:
      <input type="file" id="upload" accept="image/*">
    </label>

    <label>Zoom:
      <input type="range" id="zoom" min="0.5" max="2" step="0.01" value="1">
    </label>

    <label>Offset X:
      <input type="range" id="offsetX" min="-300" max="300" step="1" value="0">
    </label>

    <label>Offset Y:
      <input type="range" id="offsetY" min="-300" max="300" step="1" value="0">
    </label>

    <label>
      <input type="checkbox" id="toggleBorder" checked> Show Border
    </label>

    <label>
      <input type="checkbox" id="toggleLogo" checked> Show Logo
    </label>
  </div>

  <div class="controls">
    <label>Headline:
      <input type="text" id="headline" placeholder="Enter headline...">
    </label>
  </div>

  <script>
    const canvas = document.getElementById("canvas");
    const ctx = canvas.getContext("2d");

    const uploadInput = document.getElementById("upload");
    const zoomControl = document.getElementById("zoom");
    const offsetXControl = document.getElementById("offsetX");
    const offsetYControl = document.getElementById("offsetY");
    const toggleBorder = document.getElementById("toggleBorder");
    const toggleLogo = document.getElementById("toggleLogo");
    const headlineInput = document.getElementById("headline");

    let bgImage = new Image();
    bgImage.src = "background.jpg"; // supply your background image
    let logoImage = new Image();
    logoImage.src = "logo.png"; // supply your logo
    let mainImage = null;

    let imageZoom = 1;
    let imageOffsetX = 0;
    let imageOffsetY = 0;

    function handleImage(e) {
      const reader = new FileReader();
      reader.onload = function(event) {
        mainImage = new Image();
        mainImage.onload = function() {
          // Reset zoom and offsets
          const scaleX = 1080 / mainImage.width;
          const scaleY = 648 / mainImage.height;
          imageZoom = Math.min(scaleX, scaleY);
          imageOffsetX = 0;
          imageOffsetY = 0;
          zoomControl.value = imageZoom.toFixed(2);

          draw();
        };
        mainImage.src = event.target.result;
      };
      reader.readAsDataURL(e.target.files[0]);
    }

    function drawHeadline() {
      const text = headlineInput.value.trim();
      if (!text) return;

      ctx.font = "bold 48px Arial";
      ctx.fillStyle = "#fff403";
      ctx.textAlign = "center";
      ctx.textBaseline = "middle";

      // Simple wrapping
      const maxWidth = 900;
      const lineHeight = 56;
      const words = text.split(" ");
      let line = "";
      let lines = [];
      for (let i = 0; i < words.length; i++) {
        const testLine = line + words[i] + " ";
        if (ctx.measureText(testLine).width > maxWidth && i > 0) {
          lines.push(line);
          line = words[i] + " ";
        } else {
          line = testLine;
        }
      }
      lines.push(line);

      const yStart = canvas.height - (lines.length * lineHeight) / 2 - 50;
      lines.forEach((l, i) => {
        ctx.fillText(l, canvas.width / 2, yStart + i * lineHeight);
      });
    }

    function draw() {
      ctx.clearRect(0, 0, canvas.width, canvas.height);

      // 1. Background
      if (bgImage.complete) {
        ctx.drawImage(bgImage, 0, 0, canvas.width, canvas.height);
      }

      // 2. Foreground (main image)
      if (mainImage) {
        const targetWidth = 1080, targetHeight = 648;
        const scaledWidth = mainImage.width * imageZoom;
        const scaledHeight = mainImage.height * imageZoom;

        const drawX = (targetWidth - scaledWidth) / 2 + imageOffsetX;
        const drawY = (targetHeight - scaledHeight) / 2 + imageOffsetY;

        ctx.save();
        ctx.beginPath();
        ctx.rect(0, 0, targetWidth, targetHeight);
        ctx.clip();
        ctx.drawImage(mainImage, drawX, drawY, scaledWidth, scaledHeight);
        ctx.restore();
      }

      // 3. Border
      if (toggleBorder.checked) {
        ctx.strokeStyle = "white";
        ctx.lineWidth = 2;
        ctx.strokeRect(10, 10, 1060, 628);

        ctx.strokeStyle = "#ccc";
        ctx.lineWidth = 2;
        ctx.strokeRect(14, 14, 1052, 620);
      }

      // 4. Logo
      if (toggleLogo.checked && logoImage.complete) {
        ctx.drawImage(logoImage, canvas.width - 131, 20, 120, 100);
      }

      // 5. Headline
      drawHeadline();
    }

    // Event listeners
    uploadInput.addEventListener("change", handleImage);
    zoomControl.addEventListener("input", () => {
      imageZoom = parseFloat(zoomControl.value);
      draw();
    });
    offsetXControl.addEventListener("input", () => {
      imageOffsetX = parseInt(offsetXControl.value);
      draw();
    });
    offsetYControl.addEventListener("input", () => {
      imageOffsetY = parseInt(offsetYControl.value);
      draw();
    });
    toggleBorder.addEventListener("change", draw);
    toggleLogo.addEventListener("change", draw);
    headlineInput.addEventListener("input", draw);

    logoImage.onload = () => {
  draw();
  drawHeadline(); // ensure headline is always re-drawn after logo
};


    // Draw when assets load
    bgImage.onload = draw;
    logoImage.onload = draw;
  </script>
</body>
</html>

