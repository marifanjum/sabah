<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>üìè Collage Maker</title>
  <style>
    body { margin: 10px; font-family: sans-serif; }
    canvas { border: 1px solid #ccc; touch-action: none; }
    .controls { margin-top: 10px; display: flex; flex-wrap: wrap; gap: 8px; }
    .controls > * { margin: 3px; }
  </style>
</head>
<body>
  <h2>üìè Collage Maker</h2>
  <canvas id="canvas" width="600" height="600"></canvas>

  <div class="controls">
    <label>Images: <input type="file" id="fileInput" multiple accept="image/*"></label>
    <button id="fillBtn">Fill Image</button>
    <button id="downloadBtn">Download</button>
    <br>
    <button id="zoomInBtn">Zoom In</button>
    <button id="zoomOutBtn">Zoom Out</button>
    <label>Zoom: <input type="range" id="zoomSlider" min="0.1" max="10" step="0.1" value="1"></label>
    <br>
    <label><input type="checkbox" id="showBorder" checked> Show Border</label>
    <label><input type="checkbox" id="showLogo" checked> Show Logo</label>
    <br>
    <label><input type="checkbox" id="useBgImage" checked> Background Image</label>
    <label>Gradient 1: <input type="color" id="gradColor1" value="#ffffff"></label>
    <label>Gradient 2: <input type="color" id="gradColor2" value="#000000"></label>
    <label>
      Direction:
      <select id="gradDirection">
        <option value="horizontal">Horizontal</option>
        <option value="vertical">Vertical</option>
        <option value="diagonal">Diagonal</option>
      </select>
    </label>
  </div>

  <script>
    const canvas = document.getElementById("canvas");
    const ctx = canvas.getContext("2d");

    const fileInput = document.getElementById("fileInput");
    const downloadBtn = document.getElementById("downloadBtn");
    const fillBtn = document.getElementById("fillBtn");
    const zoomInBtn = document.getElementById("zoomInBtn");
    const zoomOutBtn = document.getElementById("zoomOutBtn");
    const zoomSlider = document.getElementById("zoomSlider");
    const showBorder = document.getElementById("showBorder");
    const showLogo = document.getElementById("showLogo");
    const useBgImage = document.getElementById("useBgImage");
    const gradColor1 = document.getElementById("gradColor1");
    const gradColor2 = document.getElementById("gradColor2");
    const gradDirection = document.getElementById("gradDirection");

    let images = [];
    let selectedIndex = 0;

    const bgImage = new Image();
    bgImage.src = "image-bg.png";
    const logo = new Image();
    logo.src = "logo.png";

    function getCellRects(count = 4, layout = "2x2") {
      const w = canvas.width / 2, h = canvas.height / 2;
      return [
        {x:0,y:0,w,h}, {x:w,y:0,w,h}, {x:0,y:h,w,h}, {x:w,y:h,w,h}
      ];
    }

    function draw() {
      if (useBgImage.checked && bgImage.complete) {
        ctx.drawImage(bgImage, 0, 0, canvas.width, canvas.height);
      } else {
        let grad;
        if (gradDirection.value === "horizontal") {
          grad = ctx.createLinearGradient(0, 0, canvas.width, 0);
        } else if (gradDirection.value === "vertical") {
          grad = ctx.createLinearGradient(0, 0, 0, canvas.height);
        } else {
          grad = ctx.createLinearGradient(0, 0, canvas.width, canvas.height);
        }
        grad.addColorStop(0, gradColor1.value);
        grad.addColorStop(1, gradColor2.value);
        ctx.fillStyle = grad;
        ctx.fillRect(0, 0, canvas.width, canvas.height);
      }

      const rects = getCellRects();
      images.forEach((im, i) => {
        const cell = rects[i];
        if (!im.img) return;
        const scale = im.scaleFactor;
        const iw = im.img.width * scale;
        const ih = im.img.height * scale;
        const cx = cell.x + cell.w / 2 + im.offsetX;
        const cy = cell.y + cell.h / 2 + im.offsetY;
        ctx.save();
        ctx.beginPath();
        ctx.rect(cell.x, cell.y, cell.w, cell.h);
        ctx.clip();
        ctx.drawImage(im.img, cx - iw / 2, cy - ih / 2, iw, ih);
        ctx.restore();

        if (showBorder.checked) {
          ctx.strokeStyle = "black";
          ctx.lineWidth = 2;
          ctx.strokeRect(cell.x, cell.y, cell.w, cell.h);
        }
      });

      if (showLogo.checked && logo.complete) {
        const lw = 80, lh = 80;
        ctx.drawImage(logo, canvas.width - lw - 10, canvas.height - lh - 10, lw, lh);
      }
    }

    function updateZoomUI() {
      if (images[selectedIndex]) {
        zoomSlider.value = images[selectedIndex].scaleFactor;
      }
    }

    fileInput.addEventListener("change", (e) => {
      const files = e.target.files;
      images = [];
      [...files].slice(0,4).forEach((file,i)=>{
        const img = new Image();
        img.onload = ()=> draw();
        img.src = URL.createObjectURL(file);
        images.push({img, scaleFactor:1, offsetX:0, offsetY:0});
      });
    });

    downloadBtn.addEventListener("click", () => {
      const link = document.createElement("a");
      link.download = "collage.png";
      link.href = canvas.toDataURL();
      link.click();
    });

    fillBtn.addEventListener("click", () => {
      const rects = getCellRects();
      const im = images[selectedIndex];
      if (!im) return;
      const cell = rects[selectedIndex];
      const scaleX = cell.w / im.img.width;
      const scaleY = cell.h / im.img.height;
      im.scaleFactor = Math.max(scaleX, scaleY);
      im.offsetX = 0;
      im.offsetY = 0;
      updateZoomUI();
      draw();
    });

    zoomInBtn.addEventListener("click", () => {
      if (images[selectedIndex]) {
        images[selectedIndex].scaleFactor *= 1.1;
        updateZoomUI();
        draw();
      }
    });

    zoomOutBtn.addEventListener("click", () => {
      if (images[selectedIndex]) {
        images[selectedIndex].scaleFactor /= 1.1;
        updateZoomUI();
        draw();
      }
    });

    zoomSlider.addEventListener("input", () => {
      if (images[selectedIndex]) {
        images[selectedIndex].scaleFactor = parseFloat(zoomSlider.value);
        draw();
      }
    });

    // --- Mouse drag (desktop) ---
    let dragging = false;
    let lastX=0, lastY=0;
    canvas.addEventListener("mousedown", (e)=>{
      dragging = true;
      lastX = e.offsetX;
      lastY = e.offsetY;
    });
    canvas.addEventListener("mousemove",(e)=>{
      if(dragging && images[selectedIndex]){
        images[selectedIndex].offsetX += e.offsetX - lastX;
        images[selectedIndex].offsetY += e.offsetY - lastY;
        lastX = e.offsetX;
        lastY = e.offsetY;
        draw();
      }
    });
    canvas.addEventListener("mouseup",()=> dragging=false);

    // --- Touch zoom + drag (mobile) ---
    let touchStartDist=0, lastTouchScale=1;
    let touchDragging=false, lastTouchX=0, lastTouchY=0;

    function getTouchDist(e){
      if(e.touches.length<2) return 0;
      const dx=e.touches[0].clientX-e.touches[1].clientX;
      const dy=e.touches[0].clientY-e.touches[1].clientY;
      return Math.sqrt(dx*dx+dy*dy);
    }

    canvas.addEventListener("touchstart",(e)=>{
      if(!images[selectedIndex]) return;
      if(e.touches.length===1){
        touchDragging=true;
        lastTouchX=e.touches[0].clientX;
        lastTouchY=e.touches[0].clientY;
      } else if(e.touches.length===2){
        touchStartDist=getTouchDist(e);
        lastTouchScale=1;
      }
    },{passive:false});

    canvas.addEventListener("touchmove",(e)=>{
      if(!images[selectedIndex]) return;
      const im=images[selectedIndex];
      if(e.touches.length===1 && touchDragging){
        e.preventDefault();
        const dx=e.touches[0].clientX-lastTouchX;
        const dy=e.touches[0].clientY-lastTouchY;
        im.offsetX+=dx;
        im.offsetY+=dy;
        lastTouchX=e.touches[0].clientX;
        lastTouchY=e.touches[0].clientY;
        draw();
      } else if(e.touches.length===2){
        e.preventDefault();
        const newDist=getTouchDist(e);
        if(!touchStartDist) return;
        const scaleChange=newDist/touchStartDist;
        im.scaleFactor*=scaleChange/lastTouchScale;
        im.scaleFactor=Math.max(0.1,Math.min(im.scaleFactor,10));
        lastTouchScale=scaleChange;
        updateZoomUI();
        draw();
      }
    },{passive:false});

    canvas.addEventListener("touchend",(e)=>{
      if(e.touches.length===0){
        touchDragging=false;
        touchStartDist=0;
        lastTouchScale=1;
      }
    });

    // Initial draw
    bgImage.onload = draw;
    logo.onload = draw;
  </script>
</body>
</html>
