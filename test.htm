<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Social Media Image Generator</title>
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/jameel-noori@1.1.2/jameel-noori.css">
  <style>
    body {
      font-family: Arial, sans-serif;
      background: #111;
      color: #fff;
      display: flex;
      flex-direction: column;
      align-items: center;
      padding: 20px;
    }
    input[type="text"], select, input[type="number"], input[type="range"] {
      width: 90%;
      font-size: 18px;
      padding: 8px;
      margin-bottom: 10px;
      border: none;
      border-radius: 6px;
    }
    #canvas {
      border: 2px solid #444;
      margin-bottom: 20px;
      cursor: grab;
    }
    #canvas:active {
      cursor: grabbing;
    }
    .controls {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(180px, 1fr));
      gap: 15px;
      width: 90%;
    }
    .control-group {
      background: #222;
      padding: 10px;
      border-radius: 8px;
    }
    label {
      display: block;
      margin-bottom: 5px;
      font-size: 14px;
    }
    button {
      padding: 12px;
      margin-top: 20px;
      background: #fff403;
      border: none;
      border-radius: 6px;
      font-size: 16px;
      font-weight: bold;
      cursor: pointer;
      width: 200px;
    }
  </style>
</head>
<body>
<h2> Social Media Card Advanced </h2>

  <input id="headlineInput" type="text" placeholder="Enter headline text here">
  <input id="subheadingInput" type="text" placeholder="Enter subheading text here">

  <select id="textSelector">
    <option value="headline">Headline</option>
    <option value="subheading">Subheading</option>
  </select>

  <canvas id="canvas" width="1080" height="1080"></canvas>

  <div class="controls">
    <div class="control-group">
      <label>Upload Main Image</label>
      <input type="file" id="imageLoader" accept="image/*">
    </div>
    <div class="control-group">
      <label>Image Zoom</label>
      <input type="range" id="imageZoom" min="0.5" max="3" step="0.1" value="1">
    </div>
    <div class="control-group">
      <label>Image Rotation ($\text{degrees}$)</label>
      <input type="range" id="imageRotation" min="-180" max="180" step="1" value="0">
    </div>
    <div class="control-group">
      <label>Text Rotation ($\text{degrees}$)</label>
      <input type="range" id="textRotation" min="-45" max="45" step="1" value="0">
    </div>
    <div class="control-group">
      <label>Font Size</label>
      <input type="range" id="fontSize" min="30" max="120" value="80">
    </div>
    <div class="control-group">
      <label>Line Height</label>
      <input type="range" id="lineHeight" min="40" max="150" value="100">
    </div>
    <div class="control-group">
      <label>Word Spacing</label>
      <input type="range" id="wordSpacing" min="0" max="40" value="0">
    </div>
    <div class="control-group">
      <label>Stroke Width</label>
      <input type="range" id="strokeWidth" min="0" max="10" value="2">
    </div>
    <div class="control-group">
      <label>Shadow</label>
      <input type="checkbox" id="shadow" checked>
    </div>
    <div class="control-group">
      <label>First Line Word Count</label>
      <input type="number" id="firstLineCount" min="1" max="30" value="15">
    </div>
    <div class="control-group">
      <label>Text Y Position</label>
      <input type="range" id="textY" min="500" max="1050" value="750">
    </div>
    <div class="control-group">
      <label><input type="checkbox" id="toggleBorder" checked> Show Border</label>
    </div>
    <div class="control-group">
      <label><input type="checkbox" id="toggleLogo" checked> Show Logo</label>
    </div>
  </div>

  <input id="filenameInput" type="text" placeholder="Enter file name (without extension)">
  <button id="downloadBtn">Download Final Image</button>

  <script>
    const canvas = document.getElementById("canvas");
    const ctx = canvas.getContext("2d");

    const headlineInput = document.getElementById("headlineInput");
    const subheadingInput = document.getElementById("subheadingInput");
    const textSelector = document.getElementById("textSelector");

    const imageLoader = document.getElementById("imageLoader");
    const imageZoomControl = document.getElementById("imageZoom");
    const imageRotationControl = document.getElementById("imageRotation"); // NEW
    const textRotationControl = document.getElementById("textRotation");   // NEW
    const fontSizeControl = document.getElementById("fontSize");
    const lineHeightControl = document.getElementById("lineHeight");
    const wordSpacingControl = document.getElementById("wordSpacing");
    const strokeWidthControl = document.getElementById("strokeWidth");
    const shadowControl = document.getElementById("shadow");
    const firstLineCountControl = document.getElementById("firstLineCount");
    const textYControl = document.getElementById("textY");
    const downloadBtn = document.getElementById("downloadBtn");
    const filenameInput = document.getElementById("filenameInput");

    const toggleBorder = document.getElementById("toggleBorder");
    const toggleLogo = document.getElementById("toggleLogo");

    let mainImage = null;
    let bgImage = new Image();
    let logoImage = new Image();
    bgImage.src = "bg.png"; // Make sure to have a placeholder for this or remove if not used
    logoImage.src = "sabah-logo.PNG"; // Make sure to have a placeholder for this or remove if not used

    let imageZoom = 1;
    let imageRotation = 0; // NEW
    let imageOffsetX = 0, imageOffsetY = 0;
    let isDragging = false, dragStartX = 0, dragStartY = 0;

    // Separate settings for headline and subheading
    let textSettings = {
      headline: {
        fontSize: 80,
        lineHeight: 100,
        wordSpacing: 0,
        strokeWidth: 2,
        shadow: true,
        firstLineCount: 15,
        y: 750,
        rotation: 0 // NEW
      },
      subheading: {
        fontSize: 50,
        lineHeight: 70,
        wordSpacing: 0,
        strokeWidth: 2,
        shadow: true,
        firstLineCount: 15,
        y: 900,
        rotation: 0 // NEW
      }
    };

    imageLoader.addEventListener("change", handleImage, false);

    [
      headlineInput, subheadingInput, imageZoomControl, imageRotationControl, toggleBorder, toggleLogo
    ].forEach(ctrl => ctrl.addEventListener("input", draw));

    function handleImage(e) {
      const reader = new FileReader();
      reader.onload = function(event) {
        mainImage = new Image();
        mainImage.onload = function() {
          const targetWidth = 1080, targetHeight = 648;
          // Calculate initial zoom to fit within the top area
          const scaleX = targetWidth / mainImage.width;
          const scaleY = targetHeight / mainImage.height;
          imageZoom = Math.min(scaleX, scaleY);
          imageOffsetX = 0;
          imageOffsetY = 0;
          imageZoomControl.value = imageZoom.toFixed(2);
          imageRotation = 0; // Reset rotation on new image
          imageRotationControl.value = 0;
          draw();
        };
        mainImage.src = event.target.result;
      };
      reader.readAsDataURL(e.target.files[0]);
    }

    function splitWords(text) {
      // Improved regex for Arabic/Urdu characters and tags, assuming 'Jameel Noori Nastaleeq' is for RTL script
      return text.match(/<[^>]+>|[^<>؀-ۿ\s]+|\s+/g) || [];
    }

    function drawText(text, settings) {
      if (!text) return;

      ctx.save(); // Save the canvas state before translation/rotation

      const centerX = canvas.width / 2;
      const rotationRad = settings.rotation * Math.PI / 180;

      // Translate to the center of the canvas, rotate, and then translate back
      ctx.translate(centerX, settings.y);
      ctx.rotate(rotationRad);
      ctx.translate(-centerX, -settings.y);

      ctx.font = `${settings.fontSize}px 'Jameel Noori Nastaleeq', 'JameelNooriNastaliq', serif`;
      ctx.textAlign = "center";
      ctx.direction = "rtl";
      ctx.lineWidth = settings.strokeWidth;
      ctx.strokeStyle = "#fff403";
      ctx.fillStyle = "#fff403";

      ctx.shadowColor = settings.shadow ? "transparent" : "white";
      ctx.shadowBlur = settings.shadow ? 0 : 5;
      ctx.shadowOffsetX = settings.shadow ? 0 : 4;
      ctx.shadowOffsetY = settings.shadow ? 0 : 4;

      const words = splitWords(text).filter(w => w.trim() !== "");
      // Simple line splitting based on word count
      const lines = [
        words.slice(0, settings.firstLineCount).join(" "),
        words.slice(settings.firstLineCount).join(" ")
      ].filter(l => l.trim() !== "");

      lines.forEach((line, lineIndex) => {
        // Apply word spacing by replacing single spaces with a padded space
        const paddedSpace = " ".repeat(Math.max(1, settings.wordSpacing / 4));
        const lineText = line.split(/\s+/).join(paddedSpace);
        
        // Y position relative to the translated origin (settings.y is handled by translation)
        const y = settings.y + lineIndex * settings.lineHeight;
        
        // Draw the text at the center X, with Y adjusted for line index
        ctx.fillText(lineText, centerX, y);
        ctx.strokeText(lineText, centerX, y);
      });

      ctx.restore(); // Restore the canvas state
    }

    function updateSetting(settingName, value) {
      const selected = textSelector.value;
      if (settingName === "shadow") value = !!value;
      // Ensure rotation is stored as a number
      if (settingName === "rotation") value = parseInt(value);
      if (['fontSize', 'lineHeight', 'wordSpacing', 'strokeWidth', 'firstLineCount', 'y'].includes(settingName)) {
        value = parseInt(value);
      }
      textSettings[selected][settingName] = value;
      draw();
    }

    // Event listeners for text controls
    fontSizeControl.addEventListener("input", e => updateSetting("fontSize", e.target.value));
    lineHeightControl.addEventListener("input", e => updateSetting("lineHeight", e.target.value));
    wordSpacingControl.addEventListener("input", e => updateSetting("wordSpacing", e.target.value));
    strokeWidthControl.addEventListener("input", e => updateSetting("strokeWidth", e.target.value));
    shadowControl.addEventListener("input", e => updateSetting("shadow", e.target.checked));
    firstLineCountControl.addEventListener("input", e => updateSetting("firstLineCount", e.target.value));
    textYControl.addEventListener("input", e => updateSetting("y", e.target.value));
    textRotationControl.addEventListener("input", e => updateSetting("rotation", e.target.value)); // NEW

    // Update sliders when switching text selector
    textSelector.addEventListener("change", () => {
      const selected = textSelector.value;
      fontSizeControl.value = textSettings[selected].fontSize;
      lineHeightControl.value = textSettings[selected].lineHeight;
      wordSpacingControl.value = textSettings[selected].wordSpacing;
      strokeWidthControl.value = textSettings[selected].strokeWidth;
      shadowControl.checked = textSettings[selected].shadow;
      firstLineCountControl.value = textSettings[selected].firstLineCount;
      textYControl.value = textSettings[selected].y;
      textRotationControl.value = textSettings[selected].rotation; // NEW
      draw();
    });

    // Image zoom and rotation controls
    imageZoomControl.addEventListener("input", () => {
      imageZoom = parseFloat(imageZoomControl.value);
      draw();
    });

    imageRotationControl.addEventListener("input", () => { // NEW
      imageRotation = parseInt(imageRotationControl.value);
      draw();
    });

    // Dragging image
    canvas.addEventListener("mousedown", e => {
      if (e.offsetY <= 648) {
        isDragging = true;
        dragStartX = e.offsetX - imageOffsetX;
        dragStartY = e.offsetY - imageOffsetY;
      }
    });
    canvas.addEventListener("mousemove", e => {
      if (isDragging) {
        imageOffsetX = e.offsetX - dragStartX;
        imageOffsetY = e.offsetY - dragStartY;
        draw();
      }
    });
    canvas.addEventListener("mouseup", () => { isDragging = false; });
    canvas.addEventListener("mouseleave", () => { isDragging = false; });

    // Download with custom filename
    downloadBtn.addEventListener("click", () => {
      // Temporarily remove the border/logo if not checked so they don't appear in the final download
      const borderState = toggleBorder.checked;
      const logoState = toggleLogo.checked;
      toggleBorder.checked = false;
      toggleLogo.checked = false;
      draw(); // Redraw without temporary elements

      const filename = filenameInput.value.trim() || "final-image";
      const link = document.createElement("a");
      link.download = filename + ".png";
      link.href = canvas.toDataURL("image/png");
      link.click();

      // Restore state and redraw
      toggleBorder.checked = borderState;
      toggleLogo.checked = logoState;
      draw();
    });

    function draw() {
      ctx.clearRect(0, 0, canvas.width, canvas.height);
      if (bgImage.complete) ctx.drawImage(bgImage, 0, 0, canvas.width, canvas.height);

      if (mainImage) {
        const targetWidth = 1080, targetHeight = 648;
        const scaledWidth = mainImage.width * imageZoom;
        const scaledHeight = mainImage.height * imageZoom;
        
        // Center of the image area
        const imageCenterX = targetWidth / 2;
        const imageCenterY = targetHeight / 2;

        ctx.save(); // Save canvas state for image drawing
        
        // Create clipping path for the image area (0,0 to 1080, 648)
        ctx.beginPath();
        ctx.rect(0, 0, targetWidth, targetHeight);
        ctx.clip();
        
        // Translate to image center, rotate, and translate back
        const rotationRad = imageRotation * Math.PI / 180;
        ctx.translate(imageCenterX, imageCenterY);
        ctx.rotate(rotationRad);
        ctx.translate(-imageCenterX, -imageCenterY);

        // Calculate drawing coordinates (relative to the image's original center)
        // Adjust for drag offset
        const drawX = imageCenterX - scaledWidth / 2 + imageOffsetX;
        const drawY = imageCenterY - scaledHeight / 2 + imageOffsetY;

        ctx.drawImage(mainImage, drawX, drawY, scaledWidth, scaledHeight);
        ctx.restore(); // Restore canvas state after image drawing
      }

      // Border and Logo (drawn over the image)
      if (toggleBorder.checked) {
        ctx.strokeStyle = "white";
        ctx.lineWidth = 2;
        ctx.strokeRect(10, 10, 1080 - 20, 648 - 20);
        ctx.strokeStyle = "#ccc";
        ctx.lineWidth = 2;
        ctx.strokeRect(14, 14, 1080 - 28, 648 - 28);
      }

      if (toggleLogo.checked && logoImage && logoImage.complete) {
        // Logo is at (1080 - 131) = 949, 20
        ctx.drawImage(logoImage, canvas.width - 131, 20, 120, 100);
      }

      // Text Drawing
      drawText(headlineInput.value, textSettings.headline);
      drawText(subheadingInput.value, textSettings.subheading);
    }

    // Initial draw when resources are ready
    bgImage.onload = draw;
    logoImage.onload = draw;
    // Call draw once on script load in case images are already in cache
    draw(); 
  </script>
</body>
</html>
